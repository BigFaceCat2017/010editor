//--------------------------------------
//--- 010 Editor v6.0.1 Binary Template
//
// File: OVLTemplate.bt
// Author: Andrew McRae
// Revision: 0.1
// Purpose: Parse Elite Dangerous ovl files
//--------------------------------------

typedef uint64 u8;
typedef uint32 u4;
typedef uint16 u2;
typedef ubyte  u1;
typedef int64  s8;
typedef int32  s4;
typedef int16  s2;
typedef byte   s1;

local u4 names_start = 0x90;

typedef struct {
    char sig[4];

    u4 unknown04 <bgcolor=0xd8d8d8>;
    u4 unknown08 <bgcolor=0xd8d8d8>;
    u4 unknown0C <bgcolor=0xd8d8d8>;

    u4 files_offset;

    u4 zero14 <bgcolor=0xd8d8d8>;

    u4 other_count <format=decimal>;
    u2 dir_count <format=decimal>;
    u2 type_count <format=decimal>;
    u4 file_count <format=decimal>;
    u4 file_count2 <format=decimal>;
    u4 part_count <format=decimal>;
    u4 archive_count <format=decimal>;

    u4 unknown30 <bgcolor=0xd8d8d8>;
    u4 unknown34 <bgcolor=0xd8d8d8>;
    u4 unknown38 <bgcolor=0xd8d8d8>;
    u4 unknown3C <bgcolor=0xd8d8d8>;
    u4 zero40 <bgcolor=0xd8d8d8>;
    u4 unknown44 <bgcolor=0xd8d8d8>;
    u4 unknown48 <bgcolor=0xd8d8d8>;
    u4 unknown4C <bgcolor=0xd8d8d8>;
    u4 unknown50 <bgcolor=0xd8d8d8>;

    u4 file_count3 <format=decimal>;
    u4 names_offset;

    u4 zero5C <bgcolor=0xd8d8d8>;

    u4 zero60 <hidden=true,bgcolor=cNone>;
    u4 zero64 <hidden=true,bgcolor=cNone>;
    u4 zero68 <hidden=true,bgcolor=cNone>;
    u4 zero6C <hidden=true,bgcolor=cNone>;
    u4 zero70 <hidden=true,bgcolor=cNone>;
    u4 zero74 <hidden=true,bgcolor=cNone>;
    u4 zero78 <hidden=true,bgcolor=cNone>;
    u4 zero7C <hidden=true,bgcolor=cNone>;
    u4 zero80 <hidden=true,bgcolor=cNone>;
    u4 zero84 <hidden=true,bgcolor=cNone>;
    u4 zero88 <hidden=true,bgcolor=cNone>;
    u4 zero8C <hidden=true,bgcolor=cNone>;

    Assert(file_count2 == file_count, "HEADER1 file_count2 mismatch");
    Assert(file_count3 == file_count, "HEADER1 file_count3 mismatch");
    Assert((file_count == 0) || (names_offset > 0), "HEADER1 names_offset is 0");
    Assert((file_count == 0) || (files_offset > 0), "HEADER1 files_offset is 0");
    //Assert(dir_count == 0, "HEADER1 dir_count not 0");
    //Assert(part_count == 0, "HEADER1 part_count not 0");
    //Assert(other_count == 0, "HEADER1 other_count not 0");
    //Assert(!(dir_count != 0 && part_count != 0), "HEADER1 dir and part");
    Assert(!(dir_count != 0 && other_count != 0), "HEADER1 dir and other");
    Assert(!(part_count != 0 && other_count != 0), "HEADER1 part and other");
    Assert(archive_count == 1, "HEADER1 archive_count not 1");

    Assert(unknown04 == 0x01001200, "HEADER1 unknown04 not 0x01001200");
    Assert(unknown08 == 0x00006094, "HEADER1 unknown08 not 0x00006094");
    Assert(unknown0C == 0x00000000, "HEADER1 unknown0C not 0x00000000");

    Assert(zero14 == 0, "HEADER1 zero14");
    Assert(zero40 == 0, "HEADER1 zero40");
    Assert(zero5C == 0, "HEADER1 zero5C");

    Assert(zero60 == 0, "HEADER1 zero60");
    Assert(zero64 == 0, "HEADER1 zero64");
    Assert(zero68 == 0, "HEADER1 zero68");
    Assert(zero6C == 0, "HEADER1 zero6C");
    Assert(zero70 == 0, "HEADER1 zero70");
    Assert(zero74 == 0, "HEADER1 zero74");
    Assert(zero78 == 0, "HEADER1 zero78");
    Assert(zero7C == 0, "HEADER1 zero7C");
    Assert(zero80 == 0, "HEADER1 zero70");
    Assert(zero84 == 0, "HEADER1 zero74");
    Assert(zero88 == 0, "HEADER1 zero78");
    Assert(zero8C == 0, "HEADER1 zero7C");
} HEADER1;

typedef struct {
    string type;

    Assert(type == "STATIC", "HEADER2 type not STATIC");
    u1 zero06 <bgcolor=0xd8d8d8>;

    u4 zero08 <bgcolor=0xd8d8d8>;
    u4 zero0C <bgcolor=0xd8d8d8>;
    u4 zero10 <bgcolor=0xd8d8d8>;
    u4 unknown14 <bgcolor=0xd8d8d8>;
    u4 unknown18 <bgcolor=0xd8d8d8>;
    u4 zero1C <bgcolor=0xd8d8d8>;
    u4 unknown20 <bgcolor=0xd8d8d8>;
    u4 unknown24 <bgcolor=0xd8d8d8>;
    u4 unknown28 <bgcolor=0xd8d8d8>;
    u4 zero2C <bgcolor=0xd8d8d8>;
    u4 unknown30 <bgcolor=0xd8d8d8>;

    u4 comp_size;
    u4 uncomp_size;

    u4 zero3C <bgcolor=0xd8d8d8>;
    u4 zero40 <bgcolor=0xd8d8d8>;
    u4 unknown44 <bgcolor=0xd8d8d8>;
    u4 zero48 <bgcolor=0xd8d8d8>;

    Assert(zero06 == 0, "HEADER2 zero06");
    Assert(zero08 == 0, "HEADER2 zero08");
    Assert(zero0C == 0, "HEADER2 zero0C");
    Assert(zero10 == 0, "HEADER2 zero10");
    Assert(zero1C == 0, "HEADER2 zero1C");
    Assert(zero2C == 0, "HEADER2 zero2C");
    Assert(zero3C == 0, "HEADER2 zero3C");
    Assert(zero40 == 0, "HEADER2 zero40");
    Assert(zero48 == 0, "HEADER2 zero48");
} HEADER2;

typedef struct {
    u4 unknown00 <bgcolor=0xd8d8d8>;
    u4 unknown04 <bgcolor=0xd8d8d8>;
} HEADER3;

typedef struct {
    u4 name_offset;
    u4 hash;

    u4 unknown08;
    u4 unknown0C;
    u4 unknown10;

    Assert(name_offset < h1.files_offset, "TYPE name_offset too high");

    local quad o = FTell();
    FSeek(name_offset + names_start);

    string name;

    FSeek(o);
} TYPE <optimize=false,read=read_TYPE>;
string read_TYPE(TYPE &in) {
    string out;
    SPrintf(out, "\"%s\" 0x%08x 0x%x 0x%x 0x%x", in.name, in.hash, in.unknown08, in.unknown0C, in.unknown10);
    return out;
}

typedef struct {
    TYPE t[h1.type_count];
} TYPES;

typedef struct {
    u4 name_offset;
    u4 hash;

    u2 unknown08;

    u2 type <format=decimal>;

    Assert(type < h1.type_count, "FILE type too high");
    Assert(name_offset < h1.files_offset, "FILE name_offset too high");

    local quad o = FTell();
    FSeek(name_offset + names_start);

    string name;

    FSeek(o);
} FILE <optimize=false,read=read_FILE>;
string read_FILE(FILE &in) {
    string out;
    SPrintf(out, "\"%s\" \"%s\" 0x%08x 0x%x", in.name, t.t[in.type].name, in.hash, in.unknown08);
    return out;
}

typedef struct {
    FILE f[h1.file_count];
} FILES;

typedef struct {
    u4 name_offset;

    Assert(name_offset < h1.files_offset, "DIR name_offset too high");

    local quad o = FTell();
    FSeek(name_offset + names_start);

    string name;

    FSeek(o);
} DIR <optimize=false,read=read_DIR>;
string read_DIR(DIR &in) {
    string out;
    SPrintf(out, "\"%s\"", in.name);
    return out;
}

typedef struct {
    DIR d[h1.dir_count];
} DIRS;

typedef struct {
    u4 hash;
    u4 name_offset;

    u4 unknown08;
    u4 unknown0C;
    u4 unknown10;

    Assert(name_offset < h1.files_offset, "PART name_offset too high");

    local quad o = FTell();
    FSeek(name_offset + names_start);

    string name;

    FSeek(o);
} PART <optimize=false,read=read_PART>;
string read_PART(PART &in) {
    string out;
    SPrintf(out, "\"%s\" 0x%08x 0x%x 0x%x 0x%x", in.name, in.hash, in.unknown08, in.unknown0C, in.unknown10);
    return out;
}

typedef struct {
    PART p[h1.part_count];
} PARTS;

typedef struct {
    u4 unknown00;

    u4 name_offset;

    u4 unknown08;

    Assert(name_offset < h1.files_offset, "OTHER name_offset too high");

    local quad o = FTell();
    FSeek(name_offset + names_start);

    string name;

    FSeek(o);
} OTHER <optimize=false,read=read_OTHER>;
string read_OTHER(OTHER &in) {
    string out;
    SPrintf(out, "\"%s\" 0x%x 0x%08x", in.name, in.unknown00, in.unknown08);
    return out;
}

typedef struct {
    OTHER o[h1.other_count];
} OTHERS;

typedef struct {
    Assert(ReadUShort() == 0x9c78, "ZLIB bad zlib header");

    u1 data[h2.comp_size];
} ZLIB;


DisplayFormatHex();
LittleEndian();

local int i;

Assert(ReadString(0, 4) == "FRES", "Bad sig!");

SetBackColor(0xb0b0b0);
HEADER1 h1;

FSeek(h1.files_offset + names_start);

SetBackColor(0xd8ffd8);
if (h1.type_count) {
    TYPES t;
}

SetBackColor(0xb0ffb0);
if (h1.file_count) {
    FILES f;
}

SetBackColor(0xb0b0b0);
HEADER2 h2;

SetBackColor(0xd8ffd8);
if (h1.dir_count) {
    DIRS d;
}

SetBackColor(0xb0ffb0);
if (h1.part_count) {
    PARTS p;
}

SetBackColor(0x98ff98);
if (h1.other_count) {
    OTHERS o;
}

SetBackColor(0xb0b0b0);
HEADER3 h3;

SetBackColor(0xb0b0ff);
ZLIB z;

Assert(FTell() == FileSize(), "trailing data");
