//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: OVLTTemplate.bt
// Author: Andrew McRae
// Revision: 0.1
// Purpose: Parse Elite Dangerous compressed ovl texture block
//--------------------------------------

typedef uint64 u8;
typedef uint32 u4;
typedef uint16 u2;
typedef ubyte  u1;
typedef int64  s8;
typedef int32  s4;
typedef int16  s2;
typedef byte   s1;

typedef struct {
    u2 unknown00 <bgcolor=0xd8d8d8>;
    u2 unknown02 <bgcolor=0xd8d8d8>;
} FILE_HEAD1 <optimize=true,read=read_FILE_HEAD1>;
string read_FILE_HEAD1(FILE_HEAD1 &in) {
    local string out;
    SPrintf(out, "%Xh %Xh", in.unknown00, in.unknown02);
    return out;
}

typedef struct {
    u4 zero00 <bgcolor=cNone>;
    u4 h2_size;
    u4 h2_offset;
    u4 file_hash <bgcolor=0xd8d8d8>;
    u4 unknown10 <bgcolor=0xd8d8d8>;
    u4 type_hash <bgcolor=0xd8d8d8>;
    u4 zero18 <bgcolor=cNone>;

    Assert(zero00 == 0, "FILE_HEAD2 zero00");
    Assert(zero18 == 0, "FILE_HEAD2 zero18");
} FILE_HEAD2 <optimize=true,read=read_FILE_HEAD2>;
string read_FILE_HEAD2(FILE_HEAD2 &in) {
    local string out;
    SPrintf(out, "%Xh %Xh %Xh %Xh %Xh %Xh %Xh", in.zero00, in.h2_size, in.h2_offset, in.file_hash, in.unknown10, in.type_hash, in.zero18);
    return out;
}

typedef struct {
    u4 file_hash;
    u4 type_hash;
    u4 unknown08 <bgcolor=0xd8d8d8>;
    u4 zero0C <bgcolor=cNone>;
    u4 zero10 <bgcolor=cNone>;
    u4 file_length;

    Assert(zero0C == 0, "FILE_HEAD3 zero0C");
    Assert(zero10 == 0, "FILE_HEAD3 zero10");
} FILE_HEAD3 <optimize=true,read=read_FILE_HEAD3>;
string read_FILE_HEAD3(FILE_HEAD3 &in) {
    local string out;
    SPrintf(out, "%Xh %Xh %Xh %Xh %Xh %Xh", in.file_hash, in.type_hash, in.unknown08, in.zero0C, in.zero10, in.file_length);
    return out;
}

typedef struct {
    u4 unknown00 <bgcolor=0xd8d8d8>;
    u4 unknown04 <bgcolor=0xd8d8d8>;
    u4 unknown08 <bgcolor=0xd8d8d8>;
    u4 file_length;
} FILE_HEAD4 <optimize=true,read=read_FILE_HEAD4>;
string read_FILE_HEAD4(FILE_HEAD4 &in) {
    local string out;
    SPrintf(out, "%Xh %Xh %Xh %Xh", in.unknown00, in.unknown04, in.unknown08, in.file_length);
    return out;
}

typedef struct {
    u4 file_hash;
    u4 type_hash;
    u4 unknown08 <bgcolor=0xd8d8d8>;
    u4 offset;
} FILE_HEAD5 <optimize=true,read=read_FILE_HEAD5>;
string read_FILE_HEAD5(FILE_HEAD5 &in) {
    local string out;
    SPrintf(out, "%Xh %Xh %Xh %Xh", in.file_hash, in.type_hash, in.unknown08, in.offset);
    return out;
}
typedef struct {
    u4 unknown00 <bgcolor=0xd8d8d8>;
    u4 offset1;
    u4 unknown08 <bgcolor=0xd8d8d8>;
    u4 offset2;
} FILE_HEAD6 <optimize=true,read=read_FILE_HEAD6>;
string read_FILE_HEAD6(FILE_HEAD6 &in) {
    local string out;
    SPrintf(out, "%Xh %Xh %Xh %Xh", in.unknown00, in.offset1, in.unknown08, in.offset2);
    return out;
}

typedef struct (int fh1_count, int fh2_count, int fh3_count, int fh4_count, int fh5_count, int fh6_count) {
    if (fh1_count) {
        FILE_HEAD1 fh1[fh1_count];
    }
    if (fh2_count) {
        FILE_HEAD2 fh2[fh2_count];
    }
    if (fh3_count) {
        FILE_HEAD3 fh3[fh3_count];
    }
    if (fh4_count) {
        FILE_HEAD4 fh4[fh4_count];
    }
    if (fh5_count) {
        FILE_HEAD5 fh5[fh5_count];
    }
    if (fh6_count) {
        FILE_HEAD6 fh6[fh6_count];
    }

    u8 zero68 <bgcolor=cNone>;
    u8 sig;

    Assert(sig == 0x010204083F7FBFFF, "HEADER signature not 0x010204083F7FBFFF");
    Assert(zero68 == 0, "HEADER zero68");
} HEADER;

typedef struct {
    u4 unknown00 <bgcolor=0xffd8d8>;
    u4 unknown04 <bgcolor=0xffd8d8>;
    u4 unknown08 <bgcolor=0xffd8d8>;
    u4 unknown0C <bgcolor=0xffd8d8>;
} TEXTURE_HEAD1 <optimize=true,read=read_TEXTURE_HEAD1>;
string read_TEXTURE_HEAD1(TEXTURE_HEAD1 &in) {
    local string out;
    SPrintf(out, "%Xh %Xh %Xh %Xh", in.unknown00, in.unknown04, in.unknown08, in.unknown0C);
    return out;
}

typedef struct {
    u2 width <format=decimal>;
    u2 height <format=decimal>;
    u4 unknown04 <bgcolor=0xd8ffd8>;
} TEXTURE_HEAD2 <optimize=true,read=read_TEXTURE_HEAD2>;
string read_TEXTURE_HEAD2(TEXTURE_HEAD2 &in) {
    local string out;
    SPrintf(out, "%dx%d %Xh %Xh", in.width, in.height, in.unknown04, (u4)in.width * (u4)in.height * (u4)in.unknown04);
    return out;
}

typedef struct (int i) {
    local int size = (u4)th2[i].width * (u4)th2[i].height * (u4)th2[i].unknown04;
    u1 d[size];
} TEXTURE_DATA <read=read_TEXTURE_DATA>;
string read_TEXTURE_DATA(TEXTURE_DATA &in) {
    local string out;
    SPrintf(out, "%Xd", in.size);
    return out;
}

DisplayFormatHex();
LittleEndian();

//local int texture_count = 4; // StationIdents/Data.ovl
//local int header2_size = 0x60; // StationIdents/Data.ovl
//local int data_size = 0x1ab00; // StationIdents/Data.ovl
//local int texture_count = 0; // Astro.ovl
//local int header2_size = 0x1490; // Astro.ovl
//local int data_size = 0x0; // Astro.ovl
//local int texture_count = 3; // Earth/Data.ovl
local int header2_size = 0x28; // Earth/Data.ovl
local int data_size = 0xaaac; // Earth/Data.ovl

local int i;

SetBackColor(0xb0b0b0);
//HEADER h(1, 1, 4, 4, 4, 4); // StationIdents/Data.ovl
//HEADER h(2, 2, 0, 0, 23, 104); // Astro.ovl
HEADER h(1, 1, 1, 1, 1, 1); // Earth/Data.ovl

if (header2_size) {
    SetBackColor(0xffb0b0);
    u1 h2[header2_size];
}

if (data_size) {
    SetBackColor(0xb0b0ff);
    u1 d[data_size];
}

/*
SetBackColor(0xffb0b0);
if (texture_count) {
    TEXTURE_HEAD1 th1[texture_count];
}

SetBackColor(0x80ff80);
if (texture_count) {
    TEXTURE_HEAD2 th2[texture_count];
}

SetBackColor(0xb0b0ff);
if (texture_count) {
    for (i = 0; i < texture_count; i++) {
        TEXTURE_DATA td(i);
    }
}
*/
